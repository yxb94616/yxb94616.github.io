{"pageProps":{"postData":{"id":"nuxt3-tailwindcss-dark","contentHtml":"<p>最近掘金网站上线了深色模式，看 jym 都挺青睐深色模式，想着我之前也实现过深色模式的切换，不过是在使用 <code>VUE SPA</code> 做的网站上实现的，而掘金网站使用的是 <code>VUE SSR</code> 框架 <code>Nuxt</code>，我想着实现原理都是大同小异，那我们也使用 <code>Nuxt</code> 来实现一下深色模式的切换试试。</p>\n<h2>深色模式切换原理之一</h2>\n<p>为什么是原理之一，是因为实现深色模式有多种方式，我尝试的是通过 <code>css class</code> 切换来控制深色模式切换。\n大概是这么个原理：</p>\n<ul>\n<li>\n<p>定义两套样式：你需要为深色模式和浅色模式分别定义两套样式</p>\n</li>\n<li>\n<p>切换 CSS 类：通过 JS 动态地切换特定的 CSS 类</p>\n</li>\n<li>\n<p>CSS 样式优先级：确保在 CSS 中正确设置深色模式和浅色模式的样式优先级。为了确保样式正确应用，你可以使用合适的 CSS 选择器，例如使用 .dark 或 .light 类来选择对应的样式。</p>\n</li>\n<li>\n<p>存储用户选择：如果你希望记住用户的模式选择，可以使用浏览器的本地存储（如 localStorage）或其他方式将用户的偏好保存起来。这样，用户下次访问网页时，可以根据之前的选择自动应用正确的模式。</p>\n</li>\n</ul>\n<h2>项目搭建</h2>\n<p>这里我用的是 <code>Nuxt3+Tailwindcss</code> 来搭建的项目，用 <code>Tailwindcss</code> 是因为这个库可以帮助我方便的实现深色模式，而且我现在的项目基本都是集成了 <code>Tailwindcss</code> 的，十分推荐大家使用它，如果你不了解它的话，现在了解一下也不迟哦！</p>\n<ul>\n<li>\n<p>第一步，在 <a href=\"https://nuxt.com/docs/getting-started/installation\">Nuxt 官网</a>，跟着文档三下五除二就新建好一个项目</p>\n</li>\n<li>\n<p>第二步，然后在跟着 <a href=\"https://tailwindcss.com/docs/guides/nuxtjs#3\">Tailwindcss 官网</a>，三五步就能把 <code>Tailwindcss</code> 集成到 <code>Nuxt</code> 中</p>\n</li>\n<li>\n<p>第三步，我习惯于在前端项目安装了一些插件来做规范化限制，比如在这个项目用到了这些插件</p>\n<pre><code>\"eslint\": \"^8.40.0\",\n\"eslint-config-prettier\": \"^8.8.0\",\n\"eslint-plugin-prettier\": \"^4.2.1\",\n\"eslint-plugin-vue\": \"^9.13.0\",\n\"prettier\": \"^2.8.8\",\n\"prettier-plugin-tailwindcss\": \"^0.2.8\",\n</code></pre>\n</li>\n</ul>\n<p>我搭建完的项目在这里 <a href=\"https://github.com/yxb94616/nuxt-theme-demo/commit/ea71afb171f72215aba8bb383705038050d897db\">Github Repo Commit</a></p>\n<h2>具体实现</h2>\n<h3>tailwind 深色模式配置</h3>\n<p>首先，在 <code>tailwind.config.js</code> 配置 <a href=\"https://tailwindcss.com/docs/dark-mode\">Dark Mode</a>，然后自定义一个深色模式下的颜色 (我深色模式不想要纯黑色 😂)，配置后代码如下：</p>\n<pre><code>/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: \"class\",\n  content: [\n    \"./components/**/*.{js,vue,ts}\",\n    \"./layouts/**/*.vue\",\n    \"./pages/**/*.vue\",\n    \"./plugins/**/*.{js,ts}\",\n    \"./nuxt.config.{js,ts}\",\n    \"./app.vue\",\n  ],\n  theme: {\n    extend: {},\n    extend: {\n      colors: {\n        dark: \"rgb(18,18,18)\",\n      },\n    },\n  },\n  plugins: [],\n};\n</code></pre>\n<h3>新增深色模式切换组件</h3>\n<p>在根目录下新增 <code>components/ThemeToggle.vue</code> ，找两个图标分别代表深色和浅色模式，定义一个变量来控制图标在对应模式下的显隐，并且在切换模式的时候，往根标签 <code>&#x3C;html></code> 上增删 <code>class</code>，同时也在 <code>localstorage</code> 中存储一下深色模式变量，方便后边我们做网页刷新保持深色模式功能，代码如下</p>\n<pre><code>&#x3C;template>\n  &#x3C;div\n    class=\"absolute right-5 top-3 h-8 w-8 cursor-pointer select-none rounded bg-slate-100 text-gray-500 shadow dark:bg-slate-700 dark:text-gray-400\"\n    @click=\"handleToggleTheme\"\n  >\n    &#x3C;span v-show=\"!dark\">\n      &#x3C;svg\n        t=\"1684833132212\"\n        class=\"icon\"\n        viewBox=\"0 0 1024 1024\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        p-id=\"8388\"\n        width=\"32\"\n        height=\"32\"\n      >\n        &#x3C;path\n          d=\"M501.48 493.55m-233.03 0a233.03 233.03 0 1 0 466.06 0 233.03 233.03 0 1 0-466.06 0Z\"\n          fill=\"#707070\"\n          p-id=\"8389\"\n        >&#x3C;/path>\n        &#x3C;path\n          d=\"M501.52 185.35H478.9c-8.28 0-15-6.72-15-15V87.59c0-8.28 6.72-15 15-15h22.62c8.28 0 15 6.72 15 15v82.76c0 8.28-6.72 15-15 15zM281.37 262.76l-16 16c-5.86 5.86-15.36 5.86-21.21 0l-58.52-58.52c-5.86-5.86-5.86-15.36 0-21.21l16-16c5.86-5.86 15.36-5.86 21.21 0l58.52 58.52c5.86 5.86 5.86 15.35 0 21.21zM185.76 478.48v22.62c0 8.28-6.72 15-15 15H88c-8.28 0-15-6.72-15-15v-22.62c0-8.28 6.72-15 15-15h82.76c8.28 0 15 6.72 15 15zM270.69 698.63l16 16c5.86 5.86 5.86 15.36 0 21.21l-58.52 58.52c-5.86 5.86-15.36 5.86-21.21 0l-16-16c-5.86-5.86-5.86-15.36 0-21.21l58.52-58.52c5.85-5.86 15.35-5.86 21.21 0zM486.41 794.24h22.62c8.28 0 15 6.72 15 15V892c0 8.28-6.72 15-15 15h-22.62c-8.28 0-15-6.72-15-15v-82.76c0-8.28 6.72-15 15-15zM706.56 709.31l16-16c5.86-5.86 15.36-5.86 21.21 0l58.52 58.52c5.86 5.86 5.86 15.36 0 21.21l-16 16c-5.86 5.86-15.36 5.86-21.21 0l-58.52-58.52c-5.86-5.85-5.86-15.35 0-21.21zM802.17 493.59v-22.62c0-8.28 6.72-15 15-15h82.76c8.28 0 15 6.72 15 15v22.62c0 8.28-6.72 15-15 15h-82.76c-8.28 0-15-6.72-15-15zM717.24 273.44l-16-16c-5.86-5.86-5.86-15.36 0-21.21l58.52-58.52c5.86-5.86 15.36-5.86 21.21 0l16 16c5.86 5.86 5.86 15.36 0 21.21l-58.52 58.52c-5.86 5.86-15.35 5.86-21.21 0z\"\n          fill=\"#707070\"\n          p-id=\"8390\"\n        >&#x3C;/path>\n      &#x3C;/svg>\n    &#x3C;/span>\n    &#x3C;span v-show=\"dark\">\n      &#x3C;svg\n        t=\"1684833077751\"\n        class=\"icon\"\n        viewBox=\"0 0 1024 1024\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        p-id=\"7162\"\n        width=\"32\"\n        height=\"32\"\n      >\n        &#x3C;path\n          d=\"M335.22 240.91c0-57.08 10.68-111.66 30.15-161.87-167.51 64.86-286.3 227.51-286.3 417.92 0 247.42 200.58 448 448 448 190.34 0 352.95-118.71 417.85-286.13-50.16 19.42-104.69 30.08-161.71 30.08-247.41 0-447.99-200.57-447.99-448z\"\n          fill=\"#dbdbdb\"\n          p-id=\"7163\"\n        >&#x3C;/path>\n      &#x3C;/svg>\n    &#x3C;/span>\n  &#x3C;/div>\n&#x3C;/template>\n\n&#x3C;script lang=\"ts\" setup>\nconst dark = ref(false);\n\nconst handleToggleTheme = () => {\n  const currentTheme = !dark.value;\n  dark.value = currentTheme;\n  if (currentTheme) {\n    localStorage.setItem(\"theme\", \"dark\");\n    document.documentElement.classList.add(\"dark\");\n  } else {\n    localStorage.removeItem(\"theme\");\n    document.documentElement.classList.remove(\"dark\");\n  }\n};\n&#x3C;/script>\n</code></pre>\n<h3>添加测试代码</h3>\n<p>在 <code>pages/index.vue</code> 中添加测试代码，引入 <code>ThemeToggle</code> 组件，代码如下：</p>\n<pre><code>&#x3C;template>\n  &#x3C;div\n    class=\"dark:bg-dark flex h-screen w-screen flex-col items-center justify-center bg-white\"\n  >\n    &#x3C;h1 class=\"text-6xl font-semibold text-sky-400\">2023 ikun&#x3C;/h1>\n    &#x3C;p class=\"mt-4 text-9xl font-bold text-gray-600\">只因你太美&#x3C;/p>\n    &#x3C;ThemeToggle />\n  &#x3C;/div>\n&#x3C;/template>\n</code></pre>\n<p>启动项目，访问网站就能看到如下效果</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/afda17b016b94f6c869b9ca63ead5b96~tplv-k3u1fbpfcp-watermark.image?\" alt=\"n1.gif\"></p>\n<h3>新增持久化深色模式功能</h3>\n<p>能看到已经实现深色模式切换了，但是在深色模式下刷新网站的时候，深色模式会丢失，\n上面提到在 <code>localstorage</code> 中存储了深色模式变量，那怎么去恢复深色模式呢，</p>\n<ul>\n<li>在 <code>components/ThemeToggle.vue</code> 的 <code>onMounted</code> 里获取 <code>localstorage</code> 做判断，如果是深色模式，那就做一下处理，在组件里新增下面这段代码：</li>\n</ul>\n<pre><code>onMounted(() => {\n  if (localStorage.getItem(\"theme\") === \"dark\") {\n    dark.value = true;\n    document.documentElement.classList.add(\"dark\");\n  }\n});\n</code></pre>\n<p>然后我们再去测试一下，深色模式下刷新网站，效果如图</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42ec555012444f109344066fedce4826~tplv-k3u1fbpfcp-watermark.image?\" alt=\"n2.gif\"></p>\n<p>的确是持久化了深色模式，但是发现刷新网站的时候会闪一下，这是为什么呢？</p>\n<ul>\n<li>这是因为 nuxt 框架生成的 js 代码插入到了 DOM 文档的尾部，造成 js 执行晚了一步，所以获取 <code>localstorage</code> 就延迟了一点点，造成设置深色模式的时候会闪一下</li>\n</ul>\n<p>怎么解决呢？</p>\n<ul>\n<li>那就把获取 <code>localstorage</code> 的代码插入到 DOM 文档头部不就行了，而且如果没有设置 defer 或 async 属性， js 加载还会造成浏览器将阻塞渲染，更加的能防止闪烁出现</li>\n</ul>\n<h3>解决闪烁问题</h3>\n<ul>\n<li>\n<p><code>Nuxt</code> 提供了在 DOM 文档头部插入代码的方法，请阅读 <a href=\"https://nuxt.com/docs/api/configuration/nuxt-config#head\">Nuxt Configuration Reference</a></p>\n</li>\n<li>\n<p>新建脚本文件 <code>public/script.js</code>，代码如下（这段代码来源是 <a href=\"https://tailwindcss.com/docs/dark-mode#supporting-system-preference-and-manual-selection\">tailwindcss</a>）：</p>\n</li>\n</ul>\n<pre><code>if (\n  localStorage.getItem(\"theme\") === \"dark\" ||\n  (!localStorage.getItem(\"theme\") &#x26;&#x26;\n    window.matchMedia(\"(prefers-color-scheme: dark)\").matches)\n) {\n  document.documentElement.classList.add(\"dark\");\n} else {\n  document.documentElement.classList.remove(\"dark\");\n}\n\n</code></pre>\n<ul>\n<li>然后在 <code>nuxt.config.js</code> 增加配置：</li>\n</ul>\n<pre><code>// https://nuxt.com/docs/api/configuration/nuxt-config\nexport default defineNuxtConfig({\n  app: {\n    head: {\n      script: [\"/script.js\"],\n    },\n  },\n  css: [\"~/assets/css/main.css\"],\n  postcss: {\n    plugins: {\n      tailwindcss: {},\n      autoprefixer: {},\n    },\n  },\n  devServer: {\n    port: 5005,\n  },\n});\n</code></pre>\n<ul>\n<li><code>components/ThemeToggle.vue</code> 的 <code>onMounted</code> 还是需要的，需要保持变量也同步，改一下</li>\n</ul>\n<pre><code>onMounted(() => {\n  if (localStorage.getItem(\"theme\") === \"dark\") {\n    dark.value = true;\n  }\n});\n</code></pre>\n<ul>\n<li>这里还有一个小问题，就是图标也会跟着闪烁的，原因还是js执行顺序的问题，我的解决办法是改为使用 <code>css class</code> 来控制图标的显隐，修改 <code>components/ThemeToggle.vue</code> 代码如下：</li>\n</ul>\n<pre><code>- &#x3C;span v-show=\"!dark\">\n+ &#x3C;span class=\"block dark:hidden\">\n\n- &#x3C;span v-show=\"dark\">\n+ &#x3C;span class=\"hidden dark:block\">\n</code></pre>\n<p>ok，现在我们再来在深色模式下刷新网页，么得问题，达到了想要的效果。</p>\n<p>因为在正常效果下录制 GIF 的话，刷新也看不出来，所以这里就不放效果图了，最后的代码在上面我提到的 <a href=\"https://github.com/yxb94616/nuxt-theme-demo\">github 仓库</a>。</p>\n<blockquote>\n<p>如有错误，欢迎指正</p>\n</blockquote>\n","title":"Nuxt3+Tailwindcss implements dark mode switching","date":"2023-05-24"}},"__N_SSG":true}