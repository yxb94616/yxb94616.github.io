{"pageProps":{"postData":{"id":"pnpm-monorepo","contentHtml":"<p><code>pnpm</code> 是什么：</p>\n<blockquote>\n<p>Fast, disk space efficient package manager.</p>\n<p>速度快、节省磁盘空间的软件包管理器</p>\n</blockquote>\n<p><code>monorepo</code> 是什么：</p>\n<blockquote>\n<p>A monorepo is a single repository containing multiple distinct projects, with well-defined relationships.</p>\n<p>monorepo 是包含多个不同项目的单个存储库，具有明确定义的关系。</p>\n</blockquote>\n<p>为什么需要 <code>monorepo</code> ：</p>\n<blockquote>\n<p>当你需要同时维护多个技术栈类似的项目，而这些项目之间互相依赖的时候，使用 <code>monorepo</code> 会有很多好处，比如：</p>\n</blockquote>\n<ul>\n<li>项目基础设施可以统一管理，比如 <code>eslint</code>、<code>prettier</code>、<code>tsconfig</code>等</li>\n<li>项目中抽离的公共代码库，在互相依赖的时候可以很方便的进行依赖管理和调试，比如 <code>utils</code>、<code>api</code>、<code>ui</code>等</li>\n<li>以及使用 <code>npm</code>、<code>yarn</code>、<code>pnpm</code> 等包管理器可以方便的进行第三方依赖的统一管理，达到节省安装空间，提升安装速度等目的</li>\n</ul>\n<p><code>本文章只是记录项目搭建过程，并不做概念和原理的解释</code></p>\n<p>如果你对本文章感兴趣，又对标题中的 <code>pnpm</code> 和 <code>monorepo</code> 都不了解，可以在以下地址了解一下相关知识：</p>\n<ul>\n<li><a href=\"https://pnpm.io/zh/\">pnpm</a></li>\n<li><a href=\"https://monorepo.tools\">monorepo</a></li>\n</ul>\n<h2>准备工作</h2>\n<p>安装 <code>pnpm</code> , <code>node</code> 版本最好是在 <code>16v</code> 及以上</p>\n<pre><code>npm install -g pnpm\n</code></pre>\n<p>创建一个项目文件夹</p>\n<pre><code>mkdir monorepoo-project\ncd monorepo-project\n</code></pre>\n<p>在项目中新建若干文件夹，搭建项目结构：</p>\n<pre><code>.\n├─apps  # 应用代码目录\n│  ├─admin  # 管理平台应用\n│  └─portal # 门户网站应用\n└─packages # 公共库\n    ├─api # api管理\n    ├─tsconfig # tsconfig配置\n    ├─ui # 公共组件\n    └─utils # 公共方法\n</code></pre>\n<p>在项目根目录新建文件 <code>pnpm-workspace.yaml</code>，写入如下代码：</p>\n<pre><code># pnpm-workspace.yaml\n\npackages:\n  - \"packages/*\"\n  - \"apps/*\"\n</code></pre>\n<p>然后进行一些初始化工作，在下面根目录初始化生成 <code>package.json</code></p>\n<pre><code>pnpm init\n</code></pre>\n<p>修改生成的 <code>package.json</code></p>\n<pre><code>// package.json\n{\n  \"name\": \"monorepo-project\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {},\n  \"devDependencies\": {}\n}\n</code></pre>\n<p>基础的项目目录结构以及准备工作就完成了，接下来进行编码工作，去体验一下 <code>monorepo</code></p>\n<h2>编写 demo 代码</h2>\n<h3>编写 <code>utils</code> demo</h3>\n<p>在 <code>packages/utils</code> 初始化一下应用</p>\n<pre><code>cd ./packages/utils\npnpm init\n</code></pre>\n<p>修改 <code>packages/utils</code> 下生成的 <code>package.json</code></p>\n<pre><code>// packages/utils/package.json\n{\n  \"name\": \"utils\",\n  \"version\": \"0.0.0\",\n  \"main\": \"./index.ts\",\n  \"module\": \"./index.ts\"\n}\n</code></pre>\n<p>然后再新建一个文件 <code>index.ts</code>，写入一个测试方法</p>\n<pre><code>function hello(msg = \"world\") {\n  return `hello ${msg}!`;\n}\n\nexport { hello };\n</code></pre>\n<h3>编写 <code>portal</code> demo</h3>\n<p>这里使用 <code>vite</code> + <code>react</code> 技术栈，在 <code>apps/portal</code> 里初始化一下应用</p>\n<p>在 <code>apps/portal</code> 初始化一下应用</p>\n<pre><code>cd ./apps/portal\npnpm create vite\n</code></pre>\n<p>如果在一个已经存在的文件夹下初始化 <code>vite</code> 应用，可以在 <code>Project name</code> 的时候输入 <code>.</code> ，这样就以已存在的文件夹作为应用目录</p>\n<p>将 <code>apps/portal</code> 生成的 <code>package.json</code> 里的依赖配置剪切到根目录下的 <code>package.json</code></p>\n<pre><code>// apps/portal/package.json\n{\n  \"name\": \"portal\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"tsc &#x26;&#x26; vite build\",\n    \"preview\": \"vite preview\"\n  }\n}\n</code></pre>\n<pre><code>// package.json\n{\n  \"name\": \"monorepo-project\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {},\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"^18.0.15\",\n    \"@types/react-dom\": \"^18.0.6\",\n    \"@vitejs/plugin-react\": \"^2.0.0\",\n    \"typescript\": \"^4.6.4\",\n    \"vite\": \"^3.0.0\"\n  }\n}\n</code></pre>\n<p>然后安装一下依赖，这里安装在根目录的依赖是整个项目都可以直接使用的</p>\n<pre><code>pnpm install\n</code></pre>\n<blockquote>\n<p>如果要安装依赖到根目录，使用 <code>-w</code> 参数，比如：</p>\n</blockquote>\n<pre><code>pnpm add axios -w\n</code></pre>\n<blockquote>\n<p>如果要在指定的应用中安装依赖，使用 <code>--filter</code> 参数，比如：</p>\n</blockquote>\n<pre><code>pnpm --filter api add axios\n</code></pre>\n<blockquote>\n<p><code>--filter</code> 也可以指定在具体应用下执行脚本命令，比如：</p>\n</blockquote>\n<p>启动 <code>portal</code> 应用</p>\n<pre><code>pnpm --filter portal dev\n</code></pre>\n<p>访问输出的 <code>Local Server</code> 地址 <a href=\"http://127.0.0.1:5173\">http://127.0.0.1:5173</a>，如下图</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/833c3a406f294cf98add34f2df1c608c~tplv-k3u1fbpfcp-watermark.image?\" alt=\"1658217760878.jpg\"></p>\n<p>接下来把刚才写的 <code>utils</code> 添加到 <code>portal</code> 中</p>\n<pre><code>// apps/portal/package.json\n{\n  \"name\": \"portal\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"tsc &#x26;&#x26; vite build\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"utils\": \"workspace:*\"\n  }\n}\n</code></pre>\n<p>这里的 <code>\"utils\": \"workspace:*\"</code> 是手动添加的，因为 <code>npm</code> 上是存在 <code>utils</code> 这个库的，\n版本号写成 <code>workspace:*</code>，<code>workspace</code> 代表的是工作空间，这个在 <a href=\"https://pnpm.io/zh/\">pnpm</a> 里有介绍，\n<code>*</code> 是代表使用最新版本版本，不过在本项目中也不存在依赖库版本变更问题。</p>\n<p>然后在项目根目录下执行依赖安装</p>\n<pre><code>pnpm install\n</code></pre>\n<p>在 <code>portal</code> 中引入 <code>utils</code>，并使用我们编写的测试方法</p>\n<pre><code>// apps/portal/src/App.tsx\n+ import { hello } from \"utils\";\n+ &#x3C;h1>Vite + React + {hello()}&#x3C;/h1>\n</code></pre>\n<p>然后重新启动一下 <code>portal</code> 应用</p>\n<pre><code>pnpm --filter portal dev\n</code></pre>\n<p>再访问输出的 <code>Local Server</code> 地址 <a href=\"http://127.0.0.1:5173\">http://127.0.0.1:5173</a>，如下图\n<img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a02de05d5934c3ea7d9380dcfad91c2~tplv-k3u1fbpfcp-watermark.image?\" alt=\"1658217790226.jpg\"></p>\n<h3>编写 <code>admin</code> demo</h3>\n<p>按照 <code>portal</code> 应用的创建方式，创建一下 <code>admin</code> 应用，也引入 <code>utils</code> 进行测试， 然后启动 <code>admin</code>\n<img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae9eeed5d0eb4ad78b33bddc5f93b6bf~tplv-k3u1fbpfcp-watermark.image?\" alt=\"1658218443080.jpg\"></p>\n<p>在 <code>admin</code> 中引入 <code>utils</code>，并使用我们编写的测试方法</p>\n<pre><code>// apps/admin/src/App.tsx\n+ import { hello } from \"utils\";\n+ &#x3C;h1>Vite + React + {hello(\"monorepo\")}&#x3C;/h1>\n</code></pre>\n<p>然后改一下 <code>utils</code> 提供的方法 <code>hello</code> 输出，再看一下 <code>portal</code> 和 <code>admin</code></p>\n<pre><code>// packages/utils/index.ts\n+ return `hello ${msg}! 代码不止，掘金不停。`;\n</code></pre>\n<p>可以看到 <code>portal</code> 和 <code>admin</code> 不需要重启，<code>utils</code> 的修改就已经生效了，而且 <code>utils</code> 也不需要打包就可以引入使用</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25c65666621548b388d93802522658ae~tplv-k3u1fbpfcp-watermark.image?\" alt=\"1658218890077.jpg\">\n<img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00609c15ed224f47bac578832aac4b72~tplv-k3u1fbpfcp-watermark.image?\" alt=\"1658218890065.jpg\"></p>\n<h2>应用打包</h2>\n<p>然后我们再测试一下 <code>build</code>，然后使用 <code>vite</code> 提供的 <code>preview</code> 预览一下打包应用，运行以下命令</p>\n<pre><code># 打包\npnpm --filter portal build\n# 预览\npnpm --filter portal preview\n</code></pre>\n<p>通过 <code>preview</code> 命令输出的 <code>Local Server</code> 地址进行访问，正常会看到</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/595f9147c2474cc29940a31b2af92421~tplv-k3u1fbpfcp-watermark.image?\" alt=\"1658219084249.jpg\"></p>\n<p>最后，再按照上面的流程，编写一下 <code>ui</code> 和 <code>api</code> 的 demo 代码，\n并应用到 <code>portal</code> 和 <code>admin</code> 中去。这部分代码我放到了github，\n可以参考这个 <a href=\"https://github.com/yxb94616/monorepo-project/pull/1\">PR</a></p>\n<pre><code>第一次在掘金发表文章，如果有什么地方写得不对的，或者不清楚的，请多多指教~👌\n</code></pre>\n","title":"Use pnpm to build a monorepo project","date":"2022-07-20"}},"__N_SSG":true}